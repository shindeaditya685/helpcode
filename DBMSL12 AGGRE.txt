// Creating the Employee collection
db.createCollection("Employee")

// Inserting documents into the Employee collection
db.Employee.insertMany([
    {
        Emp_id: 1,
        Name: { FName: "John", LName: "Doe" },
        CompanyName: "Infosys",
        Salary: 55000,
        Designation: "Programmer",
        Age: 28,
        Expertise: ["Java", "Python", "MongoDB"],
        DOB: "1995-05-15",
        Email: "john.doe@example.com",
        Contact: "1234567890",
        Address: [
            { PAddr: "123 Main St", LAddr: "Apt 45", City: "Pune", Pin_code: "411001" },
            { PAddr: "456 Park Ave", LAddr: "Suite 12", City: "Mumbai", Pin_code: "400001" }
        ]
    },
    // Insert more documents as needed
    // ...
]);

// Aggregation Queries

// 1. Return Designation with Total Salary above 200000.
db.Employee.aggregate([
    {
        $group: {
            _id: "$Designation",
            totalSalary: { $sum: "$Salary" }
        }
    },
    {
        $match: {
            totalSalary: { $gt: 200000 }
        }
    },
    {
        $project: {
            _id: 0,
            Designation: "$_id",
            totalSalary: 1
        }
    }
]);

// 2. Return names and _id in upper case and in alphabetical order.
db.Employee.aggregate([
    {
        $project: {
            _id: 1,
            Name: {
                $toUpper: {
                    $concat: ["$Name.FName", " ", "$Name.LName"]
                }
            }
        }
    },
    {
        $sort: { Name: 1 }
    }
]);

// 3. Find Employee with Total Salary for Each City with Designation="DBA".
db.Employee.aggregate([
    {
        $match: { Designation: "DBA" }
    },
    {
        $group: {
            _id: "$Address.City",
            totalSalary: { $sum: "$Salary" }
        }
    }
]);

// Indexing

// 4. Create Single Field Indexes on Designation field of the employee collection.
db.Employee.createIndex({ Designation: 1 });

// 5. Create Multikey Indexes on Expertise field of the employee collection.
db.Employee.createIndex({ Expertise: 1 });

// 6. Create an Index on Emp_id field, compare the time required to search Emp_id before and after creating an index. (Hint: Add at least 10000 Documents)
// Before creating an index
db.Employee.find({ Emp_id: 1000 });

// After creating an index
db.Employee.createIndex({ Emp_id: 1 });
db.Employee.find({ Emp_id: 1000 });

// 7. Return a List of Indexes created on the employee Collection.
db.Employee.getIndexes();
