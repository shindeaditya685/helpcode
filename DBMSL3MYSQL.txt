-- Create tables with constraints

CREATE TABLE Account (
    Acc_no INT PRIMARY KEY,
    branch_name VARCHAR(255) NOT NULL,
    balance DECIMAL(10, 2),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Branch (
    branch_name VARCHAR(255) PRIMARY KEY,
    branch_city VARCHAR(255),
    assets DECIMAL(12, 2)
);

CREATE TABLE Customer (
    cust_name VARCHAR(255) PRIMARY KEY,
    cust_street VARCHAR(255),
    cust_city VARCHAR(255)
);

CREATE TABLE Depositor (
    cust_name VARCHAR(255),
    acc_no INT,
    PRIMARY KEY (cust_name, acc_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (acc_no) REFERENCES Account(Acc_no)
);

CREATE TABLE Loan (
    loan_no INT PRIMARY KEY,
    branch_name VARCHAR(255),
    amount DECIMAL(10, 2),
    FOREIGN KEY (branch_name) REFERENCES Branch(branch_name)
);

CREATE TABLE Borrower (
    cust_name VARCHAR(255),
    loan_no INT,
    PRIMARY KEY (cust_name, loan_no),
    FOREIGN KEY (cust_name) REFERENCES Customer(cust_name),
    FOREIGN KEY (loan_no) REFERENCES Loan(loan_no)
);

-- Queries

-- 1. Find the branches where average account balance > 15000.
SELECT branch_name
FROM Account
GROUP BY branch_name
HAVING AVG(balance) > 15000;

-- 2. Find the number of tuples in the customer relation.
SELECT COUNT(*) AS num_tuples
FROM Customer;

-- 3. Calculate the total loan amount given by the bank.
SELECT SUM(amount) AS total_loan_amount
FROM Loan;

-- 4. Delete all loans with loan amount between 1300 and 1500.
DELETE FROM Loan
WHERE amount BETWEEN 1300 AND 1500;

-- 5. Find the average account balance at each branch.
SELECT branch_name, AVG(balance) AS average_balance
FROM Account
GROUP BY branch_name;

-- 6. Find the name of the customer and city where the customer name starts with the letter P.
SELECT cust_name, cust_city
FROM Customer
WHERE cust_name LIKE 'P%';
